generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Promo {
  id     Int      @id @default(autoincrement())
  title  String
  desc   String
  target Int
  branch String
  start  DateTime @default(now())
  end    DateTime @default(now())
  img    String   @default("/promo.jpg")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Client {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  idNum     Int    @unique

  sale        Sale[]
  createdBy   Agnt   @relation(fields: [createdById], references: [id])
  createdById Int

  name    String? @default(dbgenerated())
  details String? @default(dbgenerated())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AgntsGroup {
  id   Int    @id @default(autoincrement())
  name String @unique

  agnts Agnt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  AGNT
  OFFICE
  MNGR
  ADMIN
}

model Agnt {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String   @unique
  phone     String?  @unique
  role      Role     @default(AGNT)
  verified  Boolean? @default(false)

  gglSub  String?
  gglName String?
  picture String?

  agntSales  Sale[] @relation("agnt")
  agnt2Sales Sale[] @relation("agnt2")

  createdClients Client[]
  createdSales   Sale[]

  name  String?      @default(dbgenerated())
  group AgntsGroup[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  StickySales StickySales[]

  @@unique([firstName, lastName])
  @@index([email])
}

model Sale {
  id Int @id @default(autoincrement())

  agntId     Int
  agnt2Id    Int?
  agntShare  Int    @default(100)
  agnt2Share Int?   @default(0)
  agntPay    Float
  agnt2Pay   Float? @default(0)

  offrDt   DateTime
  clientId Int

  company   String
  branch    String
  prdct     String
  prdctType String
  pay       Float
  status    String

  saleDt DateTime?
  action String?   @default("מכירה")

  client Client @relation(fields: [clientId], references: [id])
  agnt2  Agnt?  @relation(fields: [agnt2Id], references: [id], name: "agnt2")
  agnt   Agnt   @relation(fields: [agntId], references: [id], name: "agnt")

  total      Float? @default(0)
  agntTotal  Float? @default(0)
  agnt2Total Float? @default(0)

  createdBy   Agnt          @relation(fields: [createdById], references: [id])
  createdById Int
  StickySales StickySales[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StickySales {
  id     Int  @id @default(autoincrement())
  sale   Sale @relation(fields: [saleId], references: [id])
  saleId Int
  agnt   Agnt @relation(fields: [agntId], references: [id])
  agntId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([saleId, agntId])
}

model DeletedSale {
  id Int @id @default(autoincrement())

  agntId     Int
  agnt2Id    Int?
  agntName   String?
  agnt2Name  String?
  agntShare  Int     @default(100)
  agnt2Share Int?    @default(0)

  offrDt DateTime

  company   String
  branch    String
  prdct     String
  prdctType String
  pay       Float
  status    String

  saleDt DateTime?
  action String?   @default("מכירה")

  clientId      Int
  clientDetails String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  saleCreatedAt DateTime
  deletedById   Int
}

// Add agnt leader
// AgntsGroup table
//   agnts  Agnt[] @relation("AgntsGroup")
//   leader Agnt?  @relation("leader", fields: [leaderId], references: [id])
//   leaderId Int?

// Agnt table
// AgntsGroup   AgntsGroup?  @relation("AgntsGroup", fields: [agntsGroupId], references: [id])
//   agntsGroupId Int?
//   leader       AgntsGroup[] @relation("leader")
